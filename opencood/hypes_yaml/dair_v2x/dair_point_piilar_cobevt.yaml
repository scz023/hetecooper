name: dair_point_pillar_cobevt
data_dir: "/home/scz/hetecooper/dataset/DAIR-V2X/DAIR_V2X_C"
root_dir: "/home/scz/hetecooper/dataset/DAIR-V2X/DAIR_V2X_C/train.json"
validate_dir: "/home/scz/hetecooper/dataset/DAIR-V2X/DAIR_V2X_C/val.json"
test_dir: "/home/scz/hetecooper/dataset/DAIR-V2X/DAIR_V2X_C/val.json"


wild_setting: 
  seed: 20
  async: False # time delay
  async_mode: 'sim'
  async_overhead: 100
  loc_err: False # location error
  xyz_std: 0.2
  ryp_std: 0.2
  data_size: 1.06  # Mb
  transmission_speed: 27  # Mbps
  backbone_delay: 10  # ms

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 2
  epoches: 42
  eval_freq: 5
  save_freq: 5
  test_freq: 5
  max_cav: &max_cav 2
proj_train:
  train_params:
    batch_size: 6
    epoches: &proj_epoches 11
    eval_freq: 1
    save_freq: 3
    max_cav: 2
  loss:
    core_method: cross_entropy_loss

  optimizer:
    core_method: Adam
    lr: 2e-8
    args:
      eps: 1e-10
      weight_decay: 1e-2

  lr_scheduler:
    core_method: cosineannealwarm # step, multistep, exponential and cosineannealwarm support
    epoches: *proj_epoches
    warmup_lr: 2e-5
    warmup_epoches: 10
    lr_min: 5e-10


fusion:
  core_method: 'IntermediateFusionDatasetDAIRWithneb' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  args:    
    proj_first: true
    clip_pc: false
input_source: ['lidar']
label_type: 'lidar'

comm_range: 70

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-140.8, -40, -3, 140.8, 40, 1]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [0, 90]
    feature_stride: &feature_stride 2
    num: &achor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

# model related
model:
  encoder:
    core_method: point_pillar
    args:
      voxel_size: *voxel_size
      lidar_range: *cav_lidar
      anchor_number: *achor_num
      max_cav: *max_cav
      compression: 0 # compression rate
      backbone_fix: false

      pillar_vfe:
        use_norm: true
        with_distance: false
        use_absolute_xyz: true
        num_filters: [64]
      point_pillar_scatter:
        num_features: 64

      base_bev_backbone:
        layer_nums: [3, 5, 8]
        layer_strides: [2, 2, 2]
        num_filters: [64, 128, 256]
        upsample_strides: [1, 2, 4]
        num_upsample_filter: [128, 128, 128]
      shrink_header:
        kernal_size: [ 1 ]
        stride: [ 1 ]
        padding: [ 0 ]
        dim: [ 256 ]
        input_dim: 384 # 128 * 3
  fuse:
    core_method: hete_cobevt_fuse
    args: 
      in_channels: 256
      input_dim: 256
      mlp_dim: 256
      max_cav: *max_cav
      agent_size: *max_cav
      window_size: 4
      dim_head: 16
      drop_out: 0.1
      depth: 2
      mask: true
  head:
    core_method: mlp
    args:
      head_dim: 256
      anchor_number: *achor_num

loss:
  core_method: point_pillar_loss
  args:
    cls_weight: 1.0
    reg: 2.0

optimizer:
  core_method: Adam
  lr: 0.001
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 15]